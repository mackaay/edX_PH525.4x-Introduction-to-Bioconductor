#
source("http://www.bioconductor.org/biocLite.R")
biocLite()

#We can answer such question using Bioconductor tools. The human genome sequence is provided in the BSgenome.Hsapiens.UCSC.hg19 package. If you have not done so already please donwload and install this package. Note that it encodes 3 billion bases and is therefore a large package (over 800MB) so make time to download it especially if you have a slow internet connection.
library(BiocInstaller)
biocLite("BSgenome.Hsapiens.UCSC.hg19")
#Then load the package and note that you now have access to sequence information
library(BSgenome.Hsapiens.UCSC.hg19)
BSgenome.Hsapiens.UCSC.hg19
#Note this divided into chromosomes and includes severla unmapped. We will learn to use this type of object.
#We can access chromosome 11 like this:
chr11seq <- BSgenome.Hsapiens.UCSC.hg19[["chr11"]]
#Here, for example, is a segment of 25 bases starting  at base 1 million 
subseq(chr11seq,start=10^6,width=25)

#Note that in the previous assessments we focused on static database information: genome sequence and SNPs. In previous courses we have seen the 'tissuesGeneExpression' data which is experimental data measured with microarrays. If you have not installed it you can do it like this:
library(devtools)
install_github("genomicsclass/tissuesGeneExpression")
#You can load the data:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
head(e[,1:5])

table(tissue)

#The rows of the matrix e are the features, in this case representing genes, and the columns are the samples. The entries of the matrix are gene expression measurements (in log scale) obtained using a microarray technology. 
#We can stratify the data and make boxplots like this:
boxplot(e["209169_at",]~tissue,las=2)
#IDs = c("201884_at", "209169_at", "206269_at", "207437_at", "219832_s_at", "212827_at")
#Which of the following ID(s) appear to represent a gene specific to placenta? Be careful when you are picking, to pick the correct name or names. 
for(i in IDs){
  boxplot(e[i,]~tissue,las=2)
}

#These objects were originally designed for gene expression data so the methods to extract the high throughput measurements have related names:
dat = exprs(e)
dim(dat)

#The information about samples is also stored in this object and the functions to create it try to guarantee that the columns of exprs(e) match the rows of the sample information table. pData is use as shorthand for phenotype data.
sampleInfo = pData(e)
dim(sampleInfo)
head(sampleInfo)

#Because there are certain products that are widely used, Bioconductor makes databases available from which you can extract this information. This way, every object which is linked to this information does not have to carry around the table. Later we will learn to write code like this to extract specific information from these tables:
library(hgfocus.db)
annot = select(hgfocus.db, 
               keys=featureNames(e), 
               keytype="PROBEID", 
               columns=c("CHR", "CHRLOC", "SYMBOL"))
## here we pick one column from the annotation
annot = annot[ match(featureNames(e),annot$PROBEID), ]
head(annot)
dim(annot)

library(Homo.sapiens)
class(Homo.sapiens)
#We can list all the possible types of keys:
keytypes(Homo.sapiens)
#There are also columns in the database, not all of which are keys. To list all the columns:
columns(Homo.sapiens)
#We can use Homo.sapiens to count the number of unique Entrez identifiers. To do so, we use the keys() function, which takes two arguments: the database object, and the name of the type of key we are interested in. We use head() to limit the output:
head(keys(Homo.sapiens, keytype="ENTREZID"))

#We can use the select() function to look up specific values in the database. The following line of code looks up the gene symbol, the Ensembl ID, the Entrez ID, and the chromosome number of the gene with the given Entrez ID, "123".
select(Homo.sapiens, key="123", keytype="ENTREZID", columns=c("SYMBOL", "ENSEMBL", "ENTREZID", "CHR"))
#We use the following command to enumerate genes by Entrez ID annotated to this process:
tab = select(Homo.sapiens, key="circadian rhythm", keytype="TERM", columns=c("ENTREZID"))

#We will now load the sample ExpressionSet object from the previous video, and give it a short variable name.
library(Biobase)
data(sample.ExpressionSet)
sample.ExpressionSet
samp = sample.ExpressionSet
#We can now perform convenient operations on the object, where any associated information about the columns or rows remains linked to the experiment information.
#Note that you can access the information about the samples with:
pData(samp)
#For example, to access information about the sex of the samples:
pData(samp)$sex
#And you can also use the shorthand:
samp$sex
#The experimental data matrix is stored in exprs(samp). We will refer to this as the experiment data in the following problems.
#The experimental data matrix is stored in exprs(samp). We will refer to this as the experiment data in the following problems.

#Look up the experiment data of the sample ExpressionSet with experimentData(). 
#Use the annotation() function to look up the annotation information about the experiment data. 

